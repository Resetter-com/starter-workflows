name: NodeJS with Gulp

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}

    - name: Build
      run: |
        npm install
        gulp
            - الاسم: إعداد بيئة Go
  الاستخدامات: actions/setup-go@v5.3.0
  مع:
    # إصدار Go الذي يمكن تنزيله (إذا لزم الأمر) واستخدامه. يدعم مواصفات ونطاقات semver. تأكد من وضع هذا الخيار بين علامتي اقتباس مفردتين.
    إصدار go: # اختياري
    # المسار إلى ملف go.mod أو go.work.
    ملف الإصدار: # اختياري
    # اضبط هذا الخيار على "صحيح" إذا كنت تريد أن يتحقق الإجراء دائمًا من أحدث إصدار متاح يلبي مواصفات الإصدار
    التحقق-الأحدث: # اختياري
    # يستخدم لسحب توزيعات Go من إصدارات Go. نظرًا لوجود قيمة افتراضية، لا يتم توفير هذه القيمة عادةً بواسطة المستخدم. عند تشغيل هذا الإجراء على github.com، تكون القيمة الافتراضية كافية. عند التشغيل على GHES، يمكنك تمرير رمز وصول شخصي إلى github.com إذا كنت تواجه قيودًا على السرعة.
    الرمز المميز: # اختياري، الافتراضي هو ${{ github.server_url == 'https://github.com' && github.token || '' }}
    # يستخدم لتحديد ما إذا كان التخزين المؤقت ضروريًا أم لا. اضبطه على true إذا كنت ترغب في تمكين التخزين المؤقت.
    ذاكرة التخزين المؤقت: # اختياري، الافتراضي هو true
    # يستخدم لتحديد المسار إلى ملف التبعية - go.sum
    مسار التبعية للذاكرة المؤقتة: # اختياري
    # الهندسة المعمارية المستهدفة لاستخدام Go. الأمثلة: x86، x64. سيتم استخدام هندسة النظام بشكل افتراضي.
    الهندسة المعمارية: # اختياري
          
